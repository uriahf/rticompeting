---
title: "rtichoke Competing"
format: html
editor: visual
echo: false
message: false
warning: false
---

## Histogram of Predictions

```{r}
library(rticompeting)
library(survival)
library(dcurves)
library(gtsummary); library(dplyr); library(tidyr)
library(reactable)
cox_model <- coxph(
  Surv(ttcancer, cancer) ~
    age + famhistory + marker, data = df_surv)

thin_model <- coxph(
  Surv(ttcancer, cancer) ~
    age + marker, data = df_surv)

df_surv <- df_surv |>
  dplyr::mutate(
    reals = dplyr::case_when(
      cancer_cr == "censor" ~ 0,
      cancer_cr == "diagnosed with cancer" ~ 1,
      cancer_cr == "dead other causes" ~ 2
    )
  )

pred_1_5 <- broom::augment(
  cox_model, 
  newdata = df_surv %>% mutate(ttcancer =  1.5),
  type.predict = "expected"
) |> 
  mutate(
    pr_failure18 = 1 - exp(-.fitted)
  ) |>
  pull(pr_failure18)

pred_thin <- broom::augment(
  thin_model, 
  newdata = df_surv %>% mutate(ttcancer =  1.5),
  type.predict = "expected"
) |> 
  mutate(
    pr_failure18 = 1 - exp(-.fitted)
  ) |>
  pull(pr_failure18)



stratified_by <- c("probability_threshold", "ppcr")
fixed_time_horizons <- c(1, 3, 5)

aj_dat <- create_aj_data(
  probs = pred_1_5,
  reals = df_surv$reals,
  times = df_surv$ttcancer,
  fixed_time_horizons = fixed_time_horizons,
  stratified_by = stratified_by,
  by = 0.1
) 

full_aj_dat <- list(
  "thin" = pred_thin,
  "full" = pred_1_5
) |> 
  purrr::map_df(
    ~create_aj_data(
      probs = .x,
      reals = df_surv$reals,
      times = df_surv$ttcancer,
      fixed_time_horizons = fixed_time_horizons,
      stratified_by = stratified_by,
    by = 0.1
), .id = "reference_group" )


cumulative_aj_data <- full_aj_dat |> 
  bind_rows(
    full_aj_dat |> 
      distinct(
        reference_group,
        stratified_by, 
        fixed_time_horizon, 
        competing_assumption, 
        censored_assumption,
        outcome)  |> 
      expand_grid(
        strata = "(0,0)",
        estimate = 0,
        reals_estimate = 0)
  ) |> 
  arrange(
    strata,
    ) |> 
  group_by(
    reference_group,
    stratified_by,
    fixed_time_horizon,
    competing_assumption,
    censored_assumption
  ) |> 
  mutate(
    predicted_negatives =  cumsum(reals_estimate),
    predicted_positives = lead(cumsum(rev(reals_estimate)) |> rev(), default = 0),
  ) |> 
  ungroup() 




```

```{r}
ojs_define(reference_groups_data = c("thin", "full"))

ojs_define(data = full_aj_dat)

ojs_define(cumulative_aj_data = cumulative_aj_data)
```

```{ojs}
//| panel: input

viewof time_horizon = Inputs.range(
  [1, 5], 
  {value: 3, step: 2, label: "Time Horizon:"}
)

viewof reference_group = Inputs.radio(
  reference_groups_data, {label: "Reference Group"}
)

viewof stratified_by = Inputs.radio(
  ["probability_threshold", "ppcr"], {value: "probability_threshold", label: "Stratified By"}
)

viewof censored_assumption = Inputs.radio(
  ["excluded", "adjusted"], {value: "excluded", label: "Censored Assumption"}
)

viewof competing_assumption = Inputs.radio(
  ["excluded", "adjusted"], {value: "excluded", label: "Competing Assumption"}
)



```

```{ojs}
Inputs.table(
cumulative_aj_data_filtered, {
  columns: ["strata", "outcome", "predicted_negatives", "predicted_positives"]})


```

<!-- ```{r} -->

<!-- reactable::reactable( -->

<!--   cumulative_aj_data, -->

<!--   columns = list( -->

<!--     reference_group = reactable::colDef( -->

<!--       filterMethod = filterIncludesValue -->

<!--     ) -->

<!--   ), -->

<!--   elementId = 'tbl' -->

<!--   ) -->

<!-- ``` -->

<!-- ```{ojs} -->

<!-- Reactable.setFilter('tbl', 'reference_group', reference_group) -->

<!-- ``` -->

```{ojs}

cumulative_aj_data_filtered = transpose(cumulative_aj_data).filter(function(subset) {

  return time_horizon == subset.fixed_time_horizon &&
         censored_assumption == subset.censored_assumption &&
         competing_assumption == subset.competing_assumption &&
         stratified_by == subset.stratified_by && 
         reference_group === subset.reference_group;
})

filtered = transpose(data).filter(function(subset) {

  return time_horizon == subset.fixed_time_horizon &&
         censored_assumption == subset.censored_assumption &&
         competing_assumption == subset.competing_assumption &&
         stratified_by == subset.stratified_by && 
         reference_group === subset.reference_group;
})

filtered


```

```{ojs}

  
Plot.plot({
  marks: [
    Plot.barY(filtered, { 
      x: "strata", 
      y: "reals_estimate", 
      fill: "outcome", 
      tip: true 
    })
  ],
  color: {legend: true}
})

```
